name: 'Continuous Integration'

on:
  push:
    branches:
      - main
      - dev
      - 'feature/**'
      - 'bugfix/**'
      - 'hotfix/**'
      - 'req-**'
  pull_request:
    branches:
      - main
      - dev

env:
  NODE_VERSION: '20.x'
  CACHE_KEY_PREFIX: 'foosball-tracker-v1'
  NO_COLOR: 1

jobs:
  quality-gates:
    name: 'üîç Quality Gates'
    runs-on: ubuntu-latest

    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}

    steps:
      - name: 'üì• Checkout Repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 'üîë Generate Cache Key'
        id: cache-key
        run: |
          CACHE_KEY="${{ env.CACHE_KEY_PREFIX }}-$(sha256sum package-lock.json | cut -d' ' -f1)"
          echo "key=${CACHE_KEY}" >> $GITHUB_OUTPUT
          echo "Cache key: ${CACHE_KEY}"

      - name: '‚öôÔ∏è Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: 'üì¶ Install Dependencies'
        run: |
          echo "Installing dependencies..."
          npm ci --prefer-offline --no-audit
          echo "Dependencies installed successfully"

      - name: 'üßπ ESLint Validation'
        run: |
          echo "Running ESLint validation..."
          npm run lint
          echo "‚úÖ ESLint validation passed"

      - name: 'üé® Prettier Formatting Check'
        run: |
          echo "Checking code formatting..."
          npm run format:check
          echo "‚úÖ Code formatting is correct"

      - name: 'üìù TypeScript Type Checking'
        run: |
          echo "Running TypeScript type checking..."
          npm run type-check
          echo "‚úÖ TypeScript validation passed"

      - name: 'üß™ Run Tests'
        run: |
          echo "Running test suite..."
          npm run test:ci
          echo "‚úÖ All tests passed"

      - name: 'üîí Security Audit'
        run: |
          echo "Running security audit..."
          npm audit --audit-level=high
          echo "‚úÖ Security audit passed"

      - name: 'üèóÔ∏è Build Application'
        run: |
          echo "Building application..."
          npm run build
          echo "‚úÖ Build completed successfully"

      - name: 'üìä Bundle Size Analysis'
        if: always()
        run: |
          echo "Analyzing bundle size..."
          # Create a simple bundle analysis report
          if [ -d "build" ]; then
            du -sh build/ > build-size.txt
            echo "Bundle size analysis completed"
            cat build-size.txt
          else
            echo "Build directory not found, skipping bundle analysis"
          fi

      - name: 'üìà Upload Test Results'
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ github.run_number }}
          path: |
            test-results.json
            coverage/
          retention-days: 30
          if-no-files-found: warn

      - name: 'üì¶ Upload Bundle Analysis'
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bundle-analysis-${{ github.run_number }}
          path: |
            build/
            audit-results.json
          retention-days: 7
          if-no-files-found: warn

  # Performance budget check (skipped for dev->main to optimize workflow)
  performance-budget:
    name: '‚ö° Performance Budget'
    runs-on: ubuntu-latest
    needs: quality-gates
    if: ${{ !contains(github.head_ref, 'dev') && github.base_ref != 'main' }}

    steps:
      - name: 'üì• Checkout Repository'
        uses: actions/checkout@v4

      - name: '‚öôÔ∏è Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: 'üì¶ Install Dependencies'
        run: npm ci --prefer-offline --no-audit

      - name: 'üèóÔ∏è Build for Performance Check'
        run: npm run build

      - name: '‚ö° Check Performance Budget'
        run: |
          echo "Checking performance budget..."
          npm run performance:check
          echo "‚úÖ Performance budget check completed"

  # CI Summary - Always runs to provide pipeline feedback
  ci-summary:
    name: 'üìã CI Summary'
    runs-on: ubuntu-latest
    needs: [quality-gates, performance-budget]
    if: always()

    steps:
      - name: 'üìä Generate Pipeline Summary'
        env:
          QUALITY_GATES_RESULT: ${{ needs.quality-gates.result }}
          PERFORMANCE_BUDGET_RESULT: ${{ needs.performance-budget.result }}
        run: |
          # Determine branch context
          BRANCH_NAME="${{ github.ref_name }}"
          if [[ $BRANCH_NAME =~ ^feature/.+ ]]; then
            BRANCH_TYPE="Feature Branch"
            BRANCH_ICON="üöÄ"
          elif [[ $BRANCH_NAME =~ ^bugfix/.+ ]]; then
            BRANCH_TYPE="Bugfix Branch"
            BRANCH_ICON="üêõ"
          elif [[ $BRANCH_NAME =~ ^hotfix/.+ ]]; then
            BRANCH_TYPE="Hotfix Branch"
            BRANCH_ICON="üö®"
          elif [[ $BRANCH_NAME =~ ^req-[0-9]+-[0-9]+-.+ ]]; then
            BRANCH_TYPE="REQ Implementation Branch"
            BRANCH_ICON="üìã"
          elif [[ $BRANCH_NAME == "dev" ]]; then
            BRANCH_TYPE="Development Branch"
            BRANCH_ICON="üîß"
          elif [[ $BRANCH_NAME == "main" ]]; then
            BRANCH_TYPE="Production Branch"
            BRANCH_ICON="üè≠"
          else
            BRANCH_TYPE="Branch"
            BRANCH_ICON="üåø"
          fi

          echo "# $BRANCH_ICON Foosball Tracker CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**$BRANCH_TYPE**: \`$BRANCH_NAME\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üìà Results Overview" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Quality Gates Results
          if [ "$QUALITY_GATES_RESULT" == "success" ]; then
            echo "‚úÖ **Quality Gates**: All checks passed" >> $GITHUB_STEP_SUMMARY
            echo "- üßπ Code Quality (ESLint): ‚úÖ Passed" >> $GITHUB_STEP_SUMMARY
            echo "- üé® Code Formatting (Prettier): ‚úÖ Passed" >> $GITHUB_STEP_SUMMARY
            echo "- üìù TypeScript: ‚úÖ Passed" >> $GITHUB_STEP_SUMMARY
            echo "- üß™ Tests: ‚úÖ ${{ needs.quality-gates.outputs.test-summary }}" >> $GITHUB_STEP_SUMMARY
            echo "- üîí Security Audit: ‚úÖ Passed" >> $GITHUB_STEP_SUMMARY
            echo "- üèóÔ∏è Build: ‚úÖ Passed" >> $GITHUB_STEP_SUMMARY
            echo "- üì¶ Bundle Size: ${{ needs.quality-gates.outputs.bundle-size }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Quality Gates**: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY

          # Performance Budget Results
          if [ "$PERFORMANCE_BUDGET_RESULT" == "success" ]; then
            echo "‚ö° **Performance Budget**: ‚úÖ Within limits" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö° **Performance Budget**: ‚ö†Ô∏è Check required" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY

          # Branch-specific next steps
          echo "## üéØ Next Steps" >> $GITHUB_STEP_SUMMARY
          if [[ $BRANCH_NAME =~ ^feature/.+ ]] || [[ $BRANCH_NAME =~ ^bugfix/.+ ]] || [[ $BRANCH_NAME =~ ^req-[0-9]+-[0-9]+-.+ ]]; then
            echo "- Create pull request targeting \`dev\` branch" >> $GITHUB_STEP_SUMMARY
            echo "- Ensure preview testing passes on PR" >> $GITHUB_STEP_SUMMARY
            echo "- Request code review from team members" >> $GITHUB_STEP_SUMMARY
          elif [[ $BRANCH_NAME =~ ^hotfix/.+ ]]; then
            echo "- Create pull request targeting \`main\` (emergency) or \`dev\` branch" >> $GITHUB_STEP_SUMMARY
            echo "- Expedite review process for critical fixes" >> $GITHUB_STEP_SUMMARY
            echo "- Document emergency deployment rationale" >> $GITHUB_STEP_SUMMARY
          elif [[ $BRANCH_NAME == "dev" ]]; then
            echo "- Ready to merge to \`main\` for production deployment" >> $GITHUB_STEP_SUMMARY
            echo "- Preview testing will be skipped (REQ-5.2.6 optimization)" >> $GITHUB_STEP_SUMMARY
            echo "- Production deployment will proceed directly" >> $GITHUB_STEP_SUMMARY
          elif [[ $BRANCH_NAME == "main" ]]; then
            echo "- Production deployment in progress" >> $GITHUB_STEP_SUMMARY
            echo "- Monitor deployment health and performance" >> $GITHUB_STEP_SUMMARY
            echo "- Review production metrics after deployment" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## üîó Useful Links" >> $GITHUB_STEP_SUMMARY
          echo "- [Test Results Artifact](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Bundle Analysis](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Feature Branch Workflow Guide](https://github.com/${{ github.repository }}/blob/main/.github/branch-protection.md)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "_Generated by Foosball Tracker CI Pipeline v0.8.1_" >> $GITHUB_STEP_SUMMARY

      - name: 'üéØ Final Status Check'
        env:
          QUALITY_GATES_RESULT: ${{ needs.quality-gates.result }}
          PERFORMANCE_BUDGET_RESULT: ${{ needs.performance-budget.result }}
        run: |
          if [ "$QUALITY_GATES_RESULT" == "success" ] && [ "$PERFORMANCE_BUDGET_RESULT" == "success" ]; then
            echo "üéâ All CI checks passed successfully!"
            echo "‚úÖ Ready for deployment"
          else
            echo "‚ùå CI pipeline failed"
            echo "Please review the failed checks above"
            exit 1
          fi
