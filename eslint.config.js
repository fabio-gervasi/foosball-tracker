// ESLint configuration for Foosball Trackern// Enhanced configuration with TypeScript supportnnimport typescriptEslint from '@typescript-eslint/eslint-plugin';nimport typescriptParser from '@typescript-eslint/parser';nimport reactPlugin from 'eslint-plugin-react';nimport reactHooksPlugin from 'eslint-plugin-react-hooks';nnexport default [n  {n    ignores: [n      'dist',n      'build',n      'node_modules',n      '*.config.js',n      '*.config.ts',n      'vite.config.ts',n      'tailwind.config.js',n      'postcss.config.js',n      'performance-budget.config.js',n      'coverage',n      '.github',n      'supabase/functions/**/*.tsx',n    ],n  },n  {n    files: ['**/*.{js,jsx}'],n    languageOptions: {n      ecmaVersion: 2020,n      sourceType: 'module',n      parserOptions: {n        ecmaFeatures: { jsx: true },n      },n    },n    plugins: {n      react: reactPlugin,n      'react-hooks': reactHooksPlugin,n    },n    rules: {n      'no-unused-vars': [n        'error',n        {n          argsIgnorePattern: '^_',n          varsIgnorePattern: '^_',n          caughtErrorsIgnorePattern: '^_',n        },n      ],n      'no-console': [n        'warn',n        {n          allow: ['warn', 'error'],n        },n      ],n      'no-debugger': 'error',n      'no-duplicate-imports': 'error',n      'prefer-const': 'error',n      'no-var': 'error',n      'object-shorthand': 'error',n      'prefer-template': 'error',n      'react/jsx-uses-react': 'error',n      'react/jsx-uses-vars': 'error',n      'react-hooks/rules-of-hooks': 'error',n      'react-hooks/exhaustive-deps': 'warn',n    },n  },n  {n    files: ['**/*.{ts,tsx}'],n    languageOptions: {n      parser: typescriptParser,n      ecmaVersion: 2020,n      sourceType: 'module',n      parserOptions: {n        ecmaFeatures: { jsx: true },n        project: './tsconfig.json',n      },n    },n    plugins: {n      '@typescript-eslint': typescriptEslint,n      react: reactPlugin,n      'react-hooks': reactHooksPlugin,n    },n    rules: {n      // TypeScript specific rules - relaxed for CI/CD implementationn      '@typescript-eslint/no-unused-vars': [n        'warn', // Changed from error to warnn        {n          argsIgnorePattern: '^_',n          varsIgnorePattern: '^_',n          caughtErrorsIgnorePattern: '^_',n        },n      ],n      '@typescript-eslint/no-explicit-any': 'off', // Disabled for nown      '@typescript-eslint/no-non-null-assertion': 'off',n      '@typescript-eslint/prefer-nullish-coalescing': 'off',n      '@typescript-eslint/prefer-optional-chain': 'off',nn      // General rules - relaxed for CI/CD implementationn      'no-console': [n        'warn',n        {n          allow: ['warn', 'error'],n        },n      ],n      'no-debugger': 'error',n      'no-duplicate-imports': 'warn', // Changed from error to warnn      'prefer-const': 'warn', // Changed from error to warnn      'no-var': 'error',n      'object-shorthand': 'warn', // Changed from error to warnn      'prefer-template': 'warn', // Changed from error to warnnn      // React rulesn      'react/jsx-uses-react': 'error',n      'react/jsx-uses-vars': 'error',n      'react/prop-types': 'off', // TypeScript handles thisn      'react-hooks/rules-of-hooks': 'error',n      'react-hooks/exhaustive-deps': 'warn',nn      // Turn off base rules that are covered by TypeScriptn      'no-unused-vars': 'off',n      'no-undef': 'off',n    },n  },n  {n    files: ['src/tests/**/*.{ts,tsx}', '**/*.test.{ts,tsx}', '**/*.spec.{ts,tsx}'],n    rules: {n      // More relaxed rules for test filesn      '@typescript-eslint/no-explicit-any': 'off',n      'no-console': 'off',n    },n  },n];