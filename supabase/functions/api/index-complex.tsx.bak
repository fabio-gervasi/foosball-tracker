import { Hono } from 'npm:hono';
import { cors } from 'npm:hono/cors';
import { logger } from 'npm:hono/logger';
import { createClient } from 'npm:@supabase/supabase-js@2';

// Import constants and utilities
import { API_PREFIX } from '../_shared/server-constants.tsx';
// import { validateUserAuth } from '../_shared/auth-helpers.tsx'; // Uses KV store
// import { migrateGroupDataStructure } from '../_shared/data-migration.tsx'; // Uses KV store
// import * as kv from '../_shared/kv_store.tsx'; // Deprecated
// import { serverLogger } from '../_shared/server-logger.tsx'; // Temporarily disabled

// Import route modules - KV-dependent routes temporarily disabled
// import { createAuthRoutes } from '../_shared/auth-routes.tsx'; // Uses KV store
// import { createPasswordResetRoutes } from '../_shared/password-reset-routes.tsx'; // Uses KV store
import { createDebugRoutes } from '../_shared/debug-routes-simple.tsx';
// import { createGroupRoutes } from '../_shared/group-routes.tsx'; // Uses KV store
// import { createMatchRoutes } from '../_shared/match-routes.tsx'; // Uses KV store
// import { createUserRoutes } from '../_shared/user-routes.tsx'; // Uses KV store
// import { createAdminRoutes } from '../_shared/admin-routes.tsx'; // Uses KV store
// import { createDataMigrationRoutes } from '../data-migration/index.tsx'; // Uses KV store
import { createRelationalRoutes } from '../_shared/relational-routes.tsx';

console.log('🚀 Starting Foosball Tracker API function...');

const app = new Hono();

// Global error handler
app.onError((err, c) => {
  console.error('🔥 Global error caught:', err);
  console.error('Error stack:', err.stack);
  return c.json({
    error: 'Internal server error',
    message: err.message,
    timestamp: new Date().toISOString()
  }, 500);
});

// Unhandled promise rejection handler
addEventListener('unhandledrejection', (event) => {
  console.error('🚨 Unhandled promise rejection:', event.reason);
  event.preventDefault();
});

// Uncaught exception handler
addEventListener('error', (event) => {
  console.error('🚨 Uncaught error:', event.error);
});

// Middleware
app.use(
  '*',
  cors({
    origin: '*',
    allowHeaders: ['*'],
    allowMethods: ['*'],
  })
);
app.use('*', logger(console.log));

// Initialize Supabase client with error handling
let supabase;
try {
  const supabaseUrl = Deno.env.get('SUPABASE_URL');
  const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY');

  console.log('🔧 Initializing Supabase client...');
  console.log('SUPABASE_URL present:', !!supabaseUrl);
  console.log('SUPABASE_SERVICE_ROLE_KEY present:', !!supabaseServiceKey);

  if (!supabaseUrl || !supabaseServiceKey) {
    throw new Error(`Missing Supabase environment variables: URL=${!!supabaseUrl}, ServiceKey=${!!supabaseServiceKey}`);
  }

  supabase = createClient(supabaseUrl, supabaseServiceKey);
  console.log('✅ Supabase client initialized successfully');
} catch (error) {
  console.error('❌ Failed to initialize Supabase client:', error);
  throw error;
}

// Simple health check endpoint that doesn't require any dependencies
app.get('/make-server-171cbf6f/simple-health', c => {
  try {
    return c.json({
      status: 'server-running',
      timestamp: new Date().toISOString(),
      message: 'Basic server is responding',
      environment: {
        supabaseUrl: !!Deno.env.get('SUPABASE_URL'),
        serviceRoleKey: !!Deno.env.get('SUPABASE_SERVICE_ROLE_KEY'),
        anonKey: !!Deno.env.get('SUPABASE_ANON_KEY'),
      },
    });
  } catch (error) {
    return c.json(
      {
        status: 'error',
        error: error.message,
        timestamp: new Date().toISOString(),
      },
      500
    );
  }
});

// Simple test endpoint at root level
app.get('/test', c => {
  console.log('Test endpoint called at root level');
  return c.json({
    message: 'Test endpoint working',
    timestamp: new Date().toISOString(),
    path: c.req.path
  });
});

// Direct test endpoint under API prefix
app.get(`${API_PREFIX}/direct-test`, c => {
  console.log('Direct test endpoint called');
  return c.json({
    message: 'Direct API test working!',
    timestamp: new Date().toISOString(),
    path: c.req.path,
    apiPrefix: API_PREFIX
  });
});

// Additional debug endpoint to check if server is fully operational
app.get('/make-server-171cbf6f/server-status', c => {
  try {
    return c.json({
      status: 'operational',
      timestamp: new Date().toISOString(),
      components: {
        routes: 'loaded',
        middleware: 'active',
        supabase: 'configured',
      },
      message: 'All server components loaded successfully',
    });
  } catch (error) {
    return c.json(
      {
        status: 'error',
        error: error.message,
        timestamp: new Date().toISOString(),
      },
      500
    );
  }
});

// Data migrations temporarily disabled due to KV store deprecation
// setTimeout(async () => {
//   try {
//     // Migrate any existing group data structure
//     await migrateGroupDataStructure();
//     console.log('✅ Server data migrations completed successfully');
//   } catch (error) {
//     console.error('❌ Failed to run data migrations on startup', error);
//   }
// }, 1000);
console.log('⚠️ Data migrations disabled - KV store deprecated');

// Mount route modules with error handling
try {
  console.log('🔧 Mounting working routes...');
  
  console.log('Mounting debug routes...');
  app.route(`${API_PREFIX}`, createDebugRoutes(supabase));
  console.log('✅ Debug routes mounted');

  console.log('Mounting relational routes...');
  app.route(`${API_PREFIX}`, createRelationalRoutes(supabase));
  console.log('✅ Relational routes mounted');

  console.log('🎉 Working routes mounted successfully');
  console.log('⚠️ KV-dependent routes still disabled');
  console.log('📄 Available endpoints: /health, /debug/status, /user-relational, /users-relational, etc.');
} catch (routeError) {
  console.error('❌ Error mounting routes:', routeError);
  throw routeError;
}

// Global 404 handler for API routes
app.all(`${API_PREFIX}/*`, c => {
  console.warn('⚠️ 404 - Route not found', { path: c.req.path });
  return c.json({ error: `Route not found: ${c.req.path}` }, 404);
});

// Global error handler
app.onError((err, c) => {
  console.error('🚨 Unhandled server error', err);
  return c.json(
    {
      error: 'Internal server error',
      details: err.message,
    },
    500
  );
});

// Placeholder for additional endpoints that would need to be moved to separate route files
// The original index.tsx had many more endpoints (matches, profile, admin functions, etc.)
// These would be moved to additional route files like:
// - match-routes.tsx (for match recording and history)
// - profile-routes.tsx (for profile updates, avatar uploads)
// - admin-routes.tsx (for admin panel functionality)

// Test all imports and components are working before starting server
try {
  console.log('🧪 Testing server component initialization');
  console.log('✅ All route modules imported successfully');
  console.log('✅ All constants and utilities imported successfully');
  console.log('✅ Supabase client initialized');
  console.log('✅ KV store imported successfully');
  console.log('✅ Data migration imported successfully');
  console.log('🚀 Server ready to start');
} catch (error) {
  console.error('❌ Server initialization failed', {
    name: error.name,
    message: error.message,
    stack: error.stack?.substring(0, 1000),
  });
  throw error;
}

console.log('🎉 Foosball Tracker server initialized successfully');

// Start the server with error handling
try {
  console.log('🚀 Starting Deno server');
  Deno.serve(app.fetch);
  console.log('✅ Deno server started successfully');
} catch (serverError) {
  console.error('❌ Failed to start Deno server', {
    name: serverError.name,
    message: serverError.message,
    stack: serverError.stack?.substring(0, 1000),
  });
  throw serverError;
}
